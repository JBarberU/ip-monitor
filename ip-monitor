#!/bin/bash

LOG_FILE="/tmp/ip-monitor.log";
TMP_FILE="/tmp/ip-monitor.tmp";
INTERVAL="5";

function print_help {
	echo "
ip-monitor is a small utility for logging changes to your local ip-address.
It was made for debugging a shaky wifi connection, but might be useful for 
other stuff as well.

Usage:
	-h) This help page
	-o) The logfile to write to (default is \"$LOG_FILE\")
	-i) The interval between ip checks (default is \"$INTERVAL\")
	-s) Prints some stats
	";
}

function to_hhmm {
	local H="$(($1 / 3600))";
	local M="$((($1 - $H) / 60))";
	echo "$H"h "$M"m;
}

function print_stats {
	local NUM_DROPS=$(grep -e '^\d* $' "$TMP_FILE" | wc -l | awk '{print  $1}')
	local START_RAW="$(head -n 1 "$TMP_FILE" | awk '{print $1}')"
	local START_DATE="$(date -r "$START_RAW" "+%Y%m%d-%H:%M")"
	local CURRENT_RAW="$(date "+%s")"
	local DIFF_RAW="$(($CURRENT_RAW - $START_RAW))"
	echo "Started running: $START_DATE ($(to_hhmm $DIFF_RAW) ago)"
	echo "Number of drops: $NUM_DROPS (avg $((3600 * $NUM_DROPS / $DIFF_RAW))/h)";
	echo "Current ip: $(get_last_ip)";
}

function get_ip {
	case "$(uname -s)" in 
		"Darwin") echo "$(ifconfig en1 | grep -e 'inet ' | awk '{print $2}')";;
	esac
}

function get_last_ip {
	local lines="$(wc -l "$TMP_FILE" | awk '{print $1}')";
	if [ $lines -lt 2 ]; then
		echo "";
		return;
	else
		tail -n 1 "$TMP_FILE" | awk '{print $2}'
	fi
}

function check_ip {
	local CURRENT_IP="$(get_ip)";
	local LAST_IP="$(get_last_ip)";
	if [ "$CURRENT_IP" != "" ]; then
		if [ "$CURRENT_IP" != "$LAST_IP" ]; then
			echo "$(date "+%s") $CURRENT_IP" >> "$TMP_FILE";
			log "New ip: $CURRENT_IP";
		fi
	else
		if [ "$LAST_IP" != "" ]; then
			log "Dropped network (no IP-address)";
			echo "$(date "+%s") " >> "$TMP_FILE";
		fi
	fi

}

function log_silent {
	echo "$1" >> "$LOG_FILE";
}

function date_f {
	date "+%Y%m%d-%H:%M";
}

function log {
	log_silent "$(date_f): $1";
}

while getopts ho:i:s option; do
	case "${option}" in
		h) print_help; exit;;
		o) LOG_FILE="$OPTARG";;
		i) 
			num_regex='^[0-9,\.]+$';
			if [[ ! "$OPTARG" =~ $num_regex ]]; then
				echo "$OPTARG is not a number!" >&2 ;
				exit 1;
			else
				INTERVAL="$OPTARG";
			fi
			;;
		s) print_stats; exit;;
	esac
done

if [ -f "$TMP_FILE" ]; then
	echo "It seems like there has been a previous run since bootup";
	printf "Continue with the statistics from that run? [Y/N]: ";
	read ANS;
	case ${ANS} in
		N|n|"No"|"NO")  printf "" > "$TMP_FILE";
						echo "$(date "+%s") $LOG_FILE" >> "$TMP_FILE";
						echo "-----------------------------------" >> "$TMP_FILE";
						;;
	esac
else
	printf "" > "$TMP_FILE";
	echo "$(date "+%s") $LOG_FILE" >> "$TMP_FILE";
	echo "-----------------------------------" >> "$TMP_FILE";
fi

log_silent "--------------------------------------------------------------------------------" 
log "New session";

while true; do
	check_ip;
	sleep "$INTERVAL";
done
